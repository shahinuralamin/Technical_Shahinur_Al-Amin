#!/data/data/com.termux/files/usr/bin/bash -e

VERSION=2020011601
MODIFIED="050 10-Sep-2023"
BASE_URL=https://kali.download/nethunter-images/current/rootfs
VOICE_URL=https://github.com/shahinuralamin/Technical_Shahinur_Al-Amin/releases/download/install-nethunter-modified/kali_voice.tar.xz
device_arch=$(getprop ro.product.cpu.abi)
termux_arch=$(uname -m)
USERNAME=kali

function unsupported_arch() {
    printf "${red}"
    echo "[*] Unsupported Architecture\n\n"
    printf "${reset}"
    exit
}

function ask() {
    # http://djm.me/ask
    while true; do

        if [ "${2:-}" = "Y" ]; then
            prompt="Y/n"
            default=Y
        elif [ "${2:-}" = "N" ]; then
            prompt="y/N"
            default=N
        else
            prompt="y/n"
            default=
        fi

        # Ask the question
        printf "${light_cyan}\n[?] "
        read -p "$1 [$prompt] " REPLY

        # Default?
        if [ -z "$REPLY" ]; then
            REPLY=$default
        fi

        printf "${reset}"

        # Check if the reply is valid
        case "$REPLY" in
            Y*|y*) return 0 ;;
            N*|n*) return 1 ;;
        esac
    done
}

function get_arch() {
    printf "${blue}[*] Checking your device & termux architecture ...\n"
    printf "${yellow}[>] Your device architecture is ${green}[$device_arch] ${yellow}[<]\n[>] Your termux architecture is ${green}[$termux_arch] ${yellow}[<]\n\033[1;35m"
    case $termux_arch in
        arm64-v8a|arm64-v8|aarch64|arm64)
            SYS_ARCH=arm64
            ;;
        armeabi|armv8l|armeabi-v7a|armv7l)
            SYS_ARCH=armhf
            ;;
        x86_64|x64|amd64)
            SYS_ARCH=amd64
            ;;
        i386|i686|x86)
            SYS_ARCH=i386
            ;;
        *)
            unsupported_arch
            ;;
    esac
}

function image_strings() {
    confirmation() {
    printf "${green}[√] Selected ${yellow}NetHunter ${SYS_ARCH} ${wimg}"
    read -p "$1 [Y/n] " REPLY
    if [ -z $REPLY ]; then
        REPLY="Y"
    fi
    case "$REPLY" in
        N*|n*) image_strings ;;
        Y*|y*) return 0 ;;
        *) confirmation ;;
    esac
    }
    printf "${light_cyan}[=] Enter the image you want to install:"
    printf "\033[1;35m";read -p "$1 " REPLY
    if [ -z $REPLY ]; then
        if [ ! -z $ENTER ]; then
            unset ENTER
            REPLY="F"
        fi
    else
        unset ENTER
    fi
    case "$REPLY" in
        1|f|F) wimg="full";confirmation;;
        2|m|M) wimg="minimal";confirmation;;
        3|n|N) case ${SYS_ARCH} in
                 amd64|i386) printf "${red}    [!]  NetHunter ${SYS_ARCH} (nano) not found.\n";image_strings;;
                 arm64|armhf) wimg="nano";confirmation;;
                 esac ;;
        *)       unset ENTER;printf "${yellow}~ Reply the image serial number or letters.\n"
                 if [ -z $REPLY ]; then
                     ENTER=1
                     printf "${green}~ Pressing Enter twice more will select ${SYS_ARCH} full\n"
                 fi
                 image_strings;;
    esac
}

function set_storage() {
    storage_confirmation() {
    printf "${light_cyan}"
    read -p "[C] Continuing any way or [S] setup again. [c/S] " REPLY
    if [ -z $REPLY ]; then
        REPLY="S"
    fi
    case "$REPLY" in
         C*|c*) return 0;;
         S*|s*) set_storage;;
         *) storage_confirmation;;
    esac
    }
    printf "\n${blue}[*] Your device's storage address list.${green}\n"
    i=0;for f in /storage/*/;do echo "    [$((++i))] $f"; done
    printf "\n[#] Please copy &  paste external storage address${yellow}\n"
    read -p "$1" REPLY
    case "$REPLY" in
        /storage/emulated*|/storage/self*) echo "This is your device's internal storage.";storage_confirmation;;
        *) if [ ! -z $REPLY ]; then
                if [ -d $REPLY ]; then
                    EXTERNAL_MEMO=$REPLY
                    KEEP_STORAGE="-b $EXTERNAL_MEMO \\"
                else
                    echo "External storage not found"
                    storage_confirmation
                fi
           else
                EXTERNAL_MEMO="/sdcard/kali_setup"
                KEEP_STORAGE="-b $EXTERNAL_MEMO \\"
           fi   ;;
    esac
    if [ -d /storage/emulated/0/ ]; then
        INTERNAL_MEMO=/storage/emulated/0/
        KEEP_STORAGE1="-b $INTERNAL_MEMO \\"
    else
        printf "\n${red}[x] Internal storage not found"
        internal_storage_set() {
        printf "\n${blue}[*] Your device's storage address list.${green}\n"
        i=0;for f in /storage/*/;do echo "    [$((++i))] $f"; done
        printf "\n${blue}[#] Please copy &  paste internal storage address${yellow}\n"
        read -p "$1" REPLY
        case "$REPLY" in
          *) if [ ! -z $REPLY ]; then
                 if [ -d $REPLY ]; then
                     INTERNAL_MEMO=$REPLY
                     KEEP_STORAGE1="-b $INTERNAL_MEMO \\"
                 else
                     echo "Internal storage not found"
                     storage_confirmation
                 fi
             else
                 internal_storage_set
             fi;;
        esac
        }
        internal_storage_set
    fi
    printf "${reset}"
}

function set_strings() {
    echo "    [1]  NetHunter ${SYS_ARCH} (full)    (Enter)³ [F][f]"
    echo "    [2]  NetHunter ${SYS_ARCH} (minimal)          [M][m]"
    case ${SYS_ARCH} in
        amd64|i386) echo "    [3]  NetHunter ${SYS_ARCH} (nano) (not found) [N][n]";;
        *) echo "    [3]  NetHunter ${SYS_ARCH} (nano)             [N][n]";;
    esac
    image_strings
    CHROOT=kali-${SYS_ARCH}
    IMAGE_NAME=kalifs-${SYS_ARCH}-${wimg}.tar.xz
    SHA_NAME=kalifs-${SYS_ARCH}-${wimg}.sha512sum
    VOICE_NAME=$PREFIX/bin/kali_voice.tar.xz
    VOICE=/sdcard/kali_voice
    PHOTO=*Al_Amin*
    VOICE1=*voice01*
    VOICE2=*voice02*
    VOICE3=*voice03*
    VOICE4=*voice04*
    VOICE5=*voice05*
    VOICE6=*voice06*
    VOICE7=*voice07*
    VOICE8=*voice08*
    VOICE9=*voice09*
    VOICE10=*voice10*
    VOICE11=*voice11*
    VOICE12=*voice12*
    VOICE13=*voice13*
    VOICE14=*voice14*
    VOICE15=*voice15*
}

function checkup_internet() {
    unset INTERNET
    wget -qO- https://ipecho.net/plain &> /dev/null || {
        INTERNET=1
    }
}

function cleanup_voice_file() {
    if [ ! -z $KEEP_CHECK_0 ]; then
        printf "${blue}\n[*] Checking voice files...${reset}\n"
    fi
    unset KEEP_CLEAN
    for v in ${PHOTO} ${VOICE1} ${VOICE2} ${VOICE3} ${VOICE4} ${VOICE5} ${VOICE6} ${VOICE7} ${VOICE8} ${VOICE9} ${VOICE10} ${VOICE11} ${VOICE12} ${VOICE13} ${VOICE14} ${VOICE15}; do
        if [ ! -e ${VOICE}/$v ]; then
            if [ ! -z $KEEP_CHECK_0 ]; then
                printf "$v ${red}Not found\n${reset}";KEEP_CLEAN=1
            fi
            KEEP_CHECK=1
        else
            if [ ! -z $KEEP_CHECK_0 ]; then
                printf "$v ${yellow}is OK ${green}[✔]\n${reset}"
            fi
        fi
    done
    if [ ! -z $KEEP_CHECK_0 ]; then
        unset KEEP_CHECK KEEP_CHECK_0
    fi
    if [ ! -z $KEEP_CHECK ]; then
        KEEP_CHECK_0=1;cleanup_voice_file;return
    fi
    if [ ! -z $KEEP_CLEAN ]; then
         checkup_internet
         if [ -z $INTERNET ]; then
             if [ -f $VOICE_NAME ]; then
                 printf "\n${yellow}[!] Maybe some existing voice files missing.${reset}"
                 if ask "Do you want delete the voice archive file & download newly?" "N"; then
                     rm -f $VOICE_NAME;CHECKING_VOICE=1
                     printf "${red}[x] Voice archive deleted.${reset}\n"
                     get_voice;return
                 else
                     if [ -d $VOICE ]; then
                         printf "\n${yellow}                    [↡] Or [↡]\n"
                     fi
                 fi
             else
                 get_voice;return
             fi
         else
            printf "\n${yellow}[!] Maybe some files missing in voice directory.${reset}\n"
         fi
    fi
    cleanup_voice_dir
}

function cleanup_voice_dir() {
    if [ -d $VOICE ]; then
        if ask "Do you want delete ‎‎the Voice directory?" "N"; then
            rm -rf $VOICE
            printf "${red}[x] Voice directory deleted.${reset}\n"
            cleanup_voice_dir
        fi
    else
        extract_voice;return
    fi
}

function prepare_fs() {
    confirmation_chroot() {
    read -p "[?] Enter your decision you want to restore or delete backup and create a new one? " REPLY
    printf "${reset}"
    case "$REPLY" in
        1) mv ${CHROOT}-${wimg} ${CHROOT};printf "\n${green}Successfully rootfs ${CHROOT}-${wimg} backup directory restored.${reset}\n";prepare_fs;;
        2) printf "\n${red}Deleting rootfs ${CHROOT}-${wimg} backup directory...\n";rm -rf ${CHROOT}-${wimg};printf "${green}Successfully rootfs ${CHROOT}-${wimg} backup directory deleted.\nContinuing create a new one.${reset}\n";get_rootfs;get_sha;verify_sha;;
        3) printf "\n${red}"
           echo "       [1] Cancel   'Create a new one'"
           echo "       [2] Return   'Search rootfs directory'"
           echo "       [3] Exit     'Log out'"
           exit_confirmation() {
           read -p "Enter your decision you want to cancel or return or exit. " REPLY
           printf "${reset}"
               case "$REPLY" in
                   1) get_rootfs;get_sha;verify_sha;;
                   2) prepare_fs;;
                   3) echo "You have successfully logged out.";exit;;
                   *) exit_confirmation
               esac
           }
           exit_confirmation;;
        *) confirmation_chroot;;
    esac
    printf "${reset}"
    }
    if [ -d ${CHROOT} ]; then
        if [ ! -f ${IMAGE_NAME} ]; then
            checkup_internet
            if [ -z $INTERNET ]; then
                if ask "Do you want download the [${SYS_ARCH}-${wimg}] rootfs?" "N"; then
                    get_rootfs;get_sha;verify_sha
                fi
            fi
        fi
        if [ -f ${CHROOT}/${wimg}.txt ];then
            if ask "Are you sure it's ${CHROOT}-${wimg} existing rootfs  directory?" "Y"; then
                printf "\n${yellow}[*] Existing rootfs ${CHROOT}-${wimg} directory found.${reset}\n"
                if ask "Do you want backup or delete and create a new one this ${wimg} rootfs directory?" "N"; then
                    printf "${blue}"
                    echo "       [1] NetHunter ${CHROOT}-${wimg} Backup"
                    echo "       [2] NetHunter ${CHROOT}-${wimg} Delete"
                    echo "       [3] Return"
                    buckup_confirmation() {
                    read -p "[?] Enter your decision you want to backup or delete? " REPLY
                    printf "${reset}"
                    case "$REPLY" in
                        1) if [ -d ${CHROOT}-${wimg} ]; then
                               printf "\n${yellow}[*] Found your previous ${CHROOT}-${wimg} backup directory.${reset}\n"
                               if ask "Do you want delete your previous ${CHROOT}-${wimg} backup directory?" "N"; then
                                   printf "${red}[x] Deleting your previous ${CHROOT}-${wimg} backup directory...\n"
                                   rm -rf ${CHROOT}-${wimg};mv ${CHROOT} ${CHROOT}-${wimg};echo "You have successfully backed up ${CHROOT}-${wimg} newly.";prepare_fs
                               else
                                   printf "\n${red}You have unsuccessfully backed up ${CHROOT}-${wimg}.${reset}\n"
                                   continuing_backup_confirmation() {
                                   read -p "[?] Continuing any way?. [y/N] " REPLY
                                   if [ -z $REPLY ]; then
                                       REPLY="N"
                                   fi
                                   case "$REPLY" in
                                       Y*|y*) return;;
                                       N*|n*) prepare_fs;;
                                           *) continuing_backup_confirmation
                                   esac
                                   }
                                   continuing_backup_confirmation
                               fi
                           else
                               mv ${CHROOT} ${CHROOT}-${wimg};printf "\n${green}You have successfully backed up ${CHROOT}-${wimg}.${reset}\n";prepare_fs
                           fi;;
                        2) printf "\n${red}Deleting ${CHROOT} directory...${reset}\n";rm -rf ${CHROOT};echo "You have successfully deleted ${CHROOT}";prepare_fs;;
                        3) prepare_fs;;
                        *) buckup_confirmation;;
                    esac
                    }
                    buckup_confirmation
                fi
            else
                    rm -f ${CHROOT}/${wimg}.txt;prepare_fs
            fi
        else
            finding_vrsn() {
            if ask "Are you sure it's ${CHROOT}-${VRSN} existing rootfs  directory?" "Y"; then
               if [ -f ${CHROOT}/${VRSN}.txt ];then
                 printf "\n${yellow}[*] Existing rootfs ${CHROOT}-${VRSN} directory found.${reset}\n"
                 if ask "Do you want backup or delete and create a new one this ${VRSN} rootfs directory?" "N"; then
                    printf "${blue}"
                    echo "       [1] NetHunter ${CHROOT}-${VRSN} Backup"
                    echo "       [2] NetHunter ${CHROOT}-${VRSN} Delete"
                    echo "       [3] Return"
                    buckup_confirmation() {
                    read -p "Enter your decision you want to backup or delete " REPLY
                    printf "${reset}"
                    case "$REPLY" in
                        1) if [ -d ${CHROOT}-${VRSN} ]; then
                                printf "\n${yellow}[*] Found your previous ${CHROOT}-${VRSN} backup directory.${reset}\n"
                               if ask "Do you want delete your previous ${CHROOT}-${VRSN} backup directory?" "N"; then
                                   printf "${red}[x] Deleting your previous ${CHROOT}-${VRSN} backup directory...\n"
                                   rm -rf ${CHROOT}-${VRSN};mv ${CHROOT} ${CHROOT}-${VRSN};echo "You have successfully backed up ${CHROOT}-${VRSN} newly.";prepare_fs
                               else
                                   printf "\n${red}[x] You have unsuccessfully backed up ${CHROOT}-${VRSN}.\n"
                                   continuing_backup_confirmation() {
                                   read -p "[?] Continuing any way?. [y/N] " REPLY
                                   if [ -z $REPLY ]; then
                                       REPLY="N"
                                   fi
                                   case "$REPLY" in
                                       Y*|y*) return;;
                                       N*|n*) finding_vrsn;;
                                       *) continuing_backup_confirmation
                                   esac
                                   }
                               fi
                           else
                               mv ${CHROOT} ${CHROOT}-${VRSN};echo "You have successfully backed up ${CHROOT}-${VRSN}.";prepare_fs
                           fi;;
                        2) printf "\n${red}Deleting ${CHROOT} directory...${reset}\n";rm -rf ${CHROOT};echo "You have successfully deleted ${CHROOT}";prepare_fs;;
                        3) prepare_fs;;
                        *) buckup_confirmation;;
                    esac
                    }
                    buckup_confirmation
                 fi
               fi
            else
                rm -f ${CHROOT}/${VRSN}.txt;prepare_fs
            fi
            }
            last_time_vrsn() {
             create_last_time_vrsn() {
              confirmation_create_last_time_vrsn() {
              read -p "[?] What was the last image installation? " REPLY
              case "$REPLY" in
                  1) echo "Al-Amin Zone" >> ${CHROOT}/full.txt;prepare_fs;;
                  2) echo "Al-Amin Zone" >> ${CHROOT}/minimal.txt;prepare_fs;;
                  3) echo "Al-Amin Zone" >> ${CHROOT}/nano.txt;prepare_fs;;
                  *) confirmation_create_last_time_vrsn;;
              esac
              }

             printf "\n${blue}"
             echo "       [1] ${CHROOT} 'Full'"
             echo "       [2] ${CHROOT} 'Minimal'"
             echo "       [3] ${CHROOT} 'Nano'"
             confirmation_create_last_time_vrsn
             printf "${reset}"
             }

            printf "\n${light_cyan}"
            read -p "[?] Did you install '${CHROOT} ${wimg}' image last time? [y/N] " REPLY
            if [ -z $REPLY ]; then
                REPLY="N"
            fi
            case "$REPLY" in
                Y*|y*) printf "\n${green}"
                       read -p "Yes I installed ${CHROOT} ${wimg} version last time. [y/N] " REPLY
                       if [ -z $REPLY ]; then
                           REPLY="N"
                       fi
                       case "$REPLY" in
                           Y*|y*) echo "Al-Amin Zone" >> ${CHROOT}/${wimg}.txt;prepare_fs;;
                           N*|n*) create_last_time_vrsn;;
                       esac;;
                N*|n*) create_last_time_vrsn;;
                    *) last_time_vrsn;;
            esac
            }
            if [ -f ${CHROOT}/full.txt ]; then
                VRSN="full";finding_vrsn
            elif [ -f ${CHROOT}/minimal.txt ]; then
                VRSN="minimal";finding_vrsn
            elif [ -f ${CHROOT}/nano.txt ]; then
                VRSN="nano";finding_vrsn
            else
                last_time_vrsn
            fi
        fi
    else
        printf "\n${yellow}[*] Rootfs ${CHROOT} directory not found.${resetl}\n"
        if [ -d ${CHROOT}-${wimg} ]; then
            printf "\n${yellow}[√] Rootfs ${CHROOT}-${wimg} backup directory found.${blue}\n"
            echo "       [1] ${CHROOT}-${wimg} backup Restore"
            echo "       [2] ${CHROOT}-${wimg} backup Delete"
            echo "       [3] Cancel return and exit"
            confirmation_chroot
        else
            get_rootfs;get_sha;verify_sha
        fi
    fi
}

function cleanup() {
    if [ -f ${IMAGE_NAME} ]; then
        if ask "Delete downloaded rootfs file?" "N"; then
	    if [ -f ${IMAGE_NAME} ]; then
                rm -f ${IMAGE_NAME}
	    fi
	    if [ -f ${SHA_NAME} ]; then
                rm -f ${SHA_NAME}
	    fi
        fi
    fi
}

function setup_storage() {
    printf "\n${green}";read -p " Allow the storage permission. [Enter]";printf "${reset}\n"
    termux-setup-storage ||:
    printf "${blue}";read -p " [#] Check the Termux storage permission. [Enter]"; printf "${reset}\n"
    echo "check storage" >> /sdcard/.Al-Amin_Zone || {
        printf "\n${green} Please send 'y' command & then press 'Enter'.\n\n Or,${reset}\n"
        setup_storage
        return 0
    }
    printf "\n${green}[√] Congratulations! storage is Ok${reset}\n"
}

function check_dependencies() {
    printf "${blue}\n[*] Checking package dependencies...${reset}\n"
    ## Workaround for termux-app issue #1283 (https://github.com/termux/termux-app/issues/1283)
    ##apt update -y &> /dev/null
    apt-get update -y &> /dev/null || apt-get -o Dpkg::Options::="--force-confdef" -o Dpkg::Options::="--force-confnew" dist-upgrade -y &> /dev/null
    if [ -e $HOME/storage ]; then
        echo "check storage" >> /sdcard/.Al-Amin_Zone || {
            setup_storage
        }
    else
        printf "${blue}[*] Configuring termux setup storage...${reset}\n"
        setup_storage
    fi
    for i in tar wget proot pulseaudio play-audio; do
        if [ -e $PREFIX/bin/$i ]; then
            echo "  $i is OK"
        else
            printf "Installing ${i}...\n"
            apt install -y $i || {
                printf "${red}ERROR: Failed to install packages.\n Exiting.\n${reset}"
	        exit
            }
        fi
    done
    printf "\033[1;35mapt upgrade starting...${reset}\n"
    apt upgrade -y || {
        printf "\n${red}ERROR: Failed to upgrade packages.\n_______Please check the internet connection.\n\n"
        error_confirmation() {
        read -p "$1[?] Do you want continue any way ??? [y/N] " ANS
        printf "\n${reset}"
        if [ -z $ANS ]; then
            ANS="N"
        fi
        case "$ANS" in
        Y*|y*) echo "Continuing any way.";return 0;;
        N*|n*) echo "You have successfully logged out.";exit;;
        *) error_confirmation;;
        esac
        }
        error_confirmation
    }
    if ask "Do you want added share storage in NetHunter?" "Y"; then
        set_storage
        printf "\n${green}[=] Successfully Added this storage.\n"
        for s in $INTERNAL_MEMO $EXTERNAL_MEMO; do
            if [ -d $s ]; then
                echo "    [√] $s is ok."
            fi
        done
        printf "${reset}\n"
    fi
}

function check_update() {
    printf "\n${blue}[*] Checking modified version & date...${reset}\n"
    echo "    $MODIFIED"
    if [ -f $PREFIX/bin/modified ]; then
        rm -f $PREFIX/bin/modified
    fi
    printf "\n${blue}[*] Checking internet connection...${reset}\n"
    checkup_internet
    if [ -z $INTERNET ]; then
        printf "${green}[√] Internet connection is ok.${reset}\n"
        if ask "Do you want to check for update?" "N"; then
          printf "${yellow}Checking update...${reset}\n\n"
          wget --tries=20 https://raw.githubusercontent.com/shahinuralamin/Technical_Shahinur_Al-Amin/main/modified -O $PREFIX/bin/modified &> /dev/null || {
            printf "${red}ERROR:\n Internet connection failed${reset}\n"
            return 0
    	  }
    	  while read line;do case $line in
             M050) KEEP_UPDATED=1 ;;
             *) KEEP_UPDATE=1 ;;
    	  esac
    	  done < $PREFIX/bin/modified
          update
        fi
    else
        printf "${red}";read -p "[x] Internet connection is not ok. [Enter]"; printf "${reset}\n"
    fi
    if [ ! -z $KEEP_UPDATED ]; then
         printf "${red}[${green}✔${red}] ${yellow}NetHunter installer up to date${reset}";read -p " Press 〈ENTER〉 "
    fi
}

function update() {
    if [ ! -z $KEEP_UPDATE ]; then
        printf "${yellow}[≛] NetHunter installer new update found.\n${light_cyan}"
        update_confirmation() {
        read -p "$1[?] Do you want update this?... [y/N] " REPLY
        if [ -z $REPLY ]; then
            REPLY="N"
        fi
        case $REPLY in
          Y*|y*) printf "${yellow}[*] Updating NetHunter installer...${reset}\n\n"
               wget --tries=20 https://raw.githubusercontent.com/shahinuralamin/Technical_Shahinur_Al-Amin/main/install-nethunter-modified -O $PREFIX/bin/install-nethunter-modified 2> /dev/null || {
                   printf "${red}ERROR:\n Failed to Checking install-nethunter-modified update.\n ${yellow}Continuing Anyway...\n${reset}"
                   return 0
               }
               if [ ! -d backup ]; then
                   mkdir backup
               fi
               if [ -f install-nethunter-modified ]; then
                   if [ -f backup/install-nethunter-modified ]; then
                       rm -f backup/install-nethunter-modified
                   fi
                   mv install-nethunter-modified backup/install-nethunter-modified
              	   printf "${green}[✔] Old NetHunter installer backup successfully\n"
               else
                   printf "${red}[x] Old NetHunter installer not found.${green}\n"
               fi
               mv $PREFIX/bin/install-nethunter-modified install-nethunter-modified
               chmod +x install-nethunter-modified
               printf "[✔] New NetHunter installer successfully updated${reset}\n\n"
               echo "Again run script cd;./install-nethunter-modified"
               rm -f $PREFIX/bin/sound
               exit;;
          N*|y*) return 0;;
          *)   update_confirmation;;
        esac
        }
        update_confirmation;printf "${reset}"
    fi
}

function sound_setup() {
    if [ -f $PREFIX/bin/sound ]; then
        printf "${yellow}[!] Using Pulseaudio...${reset}\n"
        play-audio ${VOICE}/${VOICE10} &> /dev/null ||:
    else
        cat > $PREFIX/bin/sound <<- EOF
pa \$1 || {
  if [ ! -f \$HOME/install-pulseaudio-termux ]; then
       pkg install root-repo && pkg install x11-repo && apt update && apt upgrade -y && apt update && apt install axel -y && apt update && axel https://raw.githubusercontent.com/shahinuralamin/Technical_Shahinur_Al-Amin/main/install-pulseaudio-termux
       if [ -f install-pulseaudio-termux ]; then
           chmod +x install-pulseaudio-termux
           ./install-pulseaudio-termux
           pa
       else
           echo "Check if there is an internet problem"
           exit
       fi
  else
      ./install-pulseaudio-termux
       pa
  fi
}
EOF
        printf "\033[1;35m[*] Configuring Pulseaudio...${reset}\n"
        play-audio ${VOICE}/${VOICE11} &> /dev/null ||:
        DEFAULT_PA=$PREFIX/etc/pulse/default.pa
        cat > $DEFAULT_PA <<- EOF
#!/data/data/com.termux/files/usr/bin/pulseaudio -nF
#
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.

# This startup script is used only if PulseAudio is started per-user
# (i.e. not in system mode)

.fail

### Automatically restore the volume of streams and devices
load-module module-device-restore
load-module module-stream-restore
load-module module-card-restore

### Automatically augment property information from .desktop files
### stored in /usr/share/application
load-module module-augment-properties

### Should be after module-*-restore but before module-*-detect
load-module module-switch-on-port-available

### Load audio drivers statically
### (it's probably better to not load these drivers manually, but instead
### use module-udev-detect -- see below -- for doing this automatically)
#load-module module-null-sink
#load-module module-pipe-sink

### Automatically load driver modules depending on the hardware available
.ifexists module-detect.so
### Use the static hardware detection module (for systems that lack udev support)
#load-module module-detect
.endif

### Automatically connect sink and source if JACK server is present
.ifexists module-jackdbus-detect.so
.nofail
load-module module-jackdbus-detect channels=2
.fail
.endif


### Load several protocols
.ifexists module-esound-protocol-unix.so
load-module module-esound-protocol-unix
.endif
load-module module-native-protocol-unix

### Network access (may be configured with paprefs, so leave this commented
### here if you plan to use paprefs)
#load-module module-esound-protocol-tcp
load-module module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1

### Load the RTP receiver module (also configured via paprefs, see above)
#load-module module-rtp-recv

### Load the RTP sender module (also configured via paprefs, see above)
#load-module module-null-sink sink_name=rtp format=s16be channels=2 rate=44100 sink_properties="device.description='RTP Multicast Sink'"
#load-module module-rtp-send source=rtp.monitor


### Automatically restore the default sink/source when changed by the user
### during runtime
### NOTE: This should be loaded as early as possible so that subsequent modules
### that look up the default sink/source get the right value
load-module module-default-device-restore

### Make sure we always have a sink around, even if it is a null sink.
load-module module-always-sink

### Honour intended role device property
load-module module-intended-roles

### Automatically suspend sinks/sources that become idle for too long
load-module module-suspend-on-idle

### If autoexit on idle is enabled we want to make sure we only quit
### when no local session needs us anymore.
.ifexists module-console-kit.so
load-module module-console-kit
.endif
.ifexists module-systemd-login.so
load-module module-systemd-login
.endif

### Enable positioned event sounds
load-module module-position-event-sounds

### Cork music/video streams when a phone stream is active
load-module module-role-cork

### Modules to allow autoloading of filters (such as echo cancellation)
### on demand. module-filter-heuristics tries to determine what filters
### make sense, and module-filter-apply does the heavy-lifting of
### loading modules and rerouting streams.
load-module module-filter-heuristics
load-module module-filter-apply

### Make some devices default
#set-default-sink output
#set-default-source input

### Allow including a default.pa.d directory, which if present, can be used
### for additional configuration snippets.
### Note that those snippet files must have a .pa file extension, not .conf
.nofail
.include /data/data/com.termux/files/usr/etc/pulse/default.pa.d
load-module module-sles-sink
#load-module module-aaudio-sink
EOF
    cat > $PREFIX/etc/pulse/daemon.conf <<- EOF
# This file is part of PulseAudio.
#
# PulseAudio is free software; you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# PulseAudio is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
# General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with PulseAudio; if not, see <http://www.gnu.org/licenses/>.

## Configuration file for the PulseAudio daemon. See pulse-daemon.conf(5) for
## more information. Default values are commented out.  Use either ; or # for
## commenting.

; daemonize = no
; fail = yes
; allow-module-loading = yes
; allow-exit = yes
; use-pid-file = yes
; system-instance = no
; enable-shm = yes
; enable-memfd = yes
; shm-size-bytes = 0 # setting this 0 will use the system-default, usually 64 MiB
; lock-memory = no
; cpu-limit = no

; high-priority = yes
; nice-level = -11

; realtime-scheduling = yes
; realtime-priority = 5

; exit-idle-time = -1
; scache-idle-time = 20

; dl-search-path = (depends on architecture)

; load-default-script-file = yes
; default-script-file = /data/data/com.termux/files/usr/etc/pulse/default.pa

; log-target = auto
; log-level = notice
; log-meta = no
; log-time = no
; log-backtrace = 0

; resample-method = speex-float-1
; avoid-resampling = false
; enable-remixing = yes
; remixing-use-all-sink-channels = yes
; remixing-produce-lfe = no
; remixing-consume-lfe = no
; lfe-crossover-freq = 0

; flat-volumes = no

; rescue-streams = yes

; rlimit-fsize = -1
; rlimit-data = -1
; rlimit-stack = -1
; rlimit-core = -1
; rlimit-as = -1
; rlimit-rss = -1
; rlimit-nproc = -1
; rlimit-nofile = 256
; rlimit-memlock = -1
; rlimit-locks = -1
; rlimit-sigpending = -1
; rlimit-msgqueue = -1
; rlimit-nice = 31
; rlimit-rtprio = 9
; rlimit-rttime = 200000

; default-sample-format = s16le
; default-sample-rate = 44100
; alternate-sample-rate = 48000
; default-sample-channels = 2
; default-channel-map = front-left,front-right

; default-fragments = 4
; default-fragment-size-msec = 25

; enable-deferred-volume = yes
; deferred-volume-safety-margin-usec = 8000
; deferred-volume-extra-delay-usec = 0
EOF
        chmod 700 $PREFIX/bin/sound
    fi
        if [ -f ./sound ]; then
            rm -f ./sound
        fi
        if [ ! -f ./sound ]; then
            ln -s $PREFIX/bin/sound ./sound >/dev/null
        fi
}

function get_url() {
    ROOTFS_URL="${BASE_URL}/${IMAGE_NAME}"
    SHA_URL="${BASE_URL}/${SHA_NAME}"
}

function get_rootfs() {
    unset KEEP_IMAGE
    if [ -f ${IMAGE_NAME} ]; then
        if ask "Existing image file found. Delete and download a new one ?" "N"; then
            rm -f ${IMAGE_NAME}
        else
            printf "${yellow}[!] Using existing rootfs archive${reset}\n"
            KEEP_IMAGE=1
            return
        fi
    fi
    printf "${blue}[*] Downloading rootfs...${reset}\n\n"
    play-audio ${VOICE}/${VOICE12} &> /dev/null ||:
    get_url
    wget ${EXTRA_ARGS} --continue "$ROOTFS_URL"
}

function get_voice() {
    if [ ! -f ${VOICE_NAME} ]; then
        printf "\n${yellow}[!] Existing voice archive file not found.${reset}\n"
        unset VOICE_FILE
        checkup_internet
        if [ -d ${VOICE} ]; then
            if [ -z $INTERNET ]; then
                if ask "Do you want download the voice?" "N"; then
                    VOICE_FILE=1
                else
                    if [ -z $CHECKING_VOICE ]; then
                        cleanup_voice_dir
                        unset CHECKING_VOICE
                        return
                    else
                        cleanup_voice_dir
                        unset CHECKING_VOICE
                        return
                    fi
                fi
            fi
        else
            if [ -z $INTERNET ]; then
                VOICE_FILE=1
            fi
        fi
    else
        printf "\n${yellow}[!] Existing voice archive file found.${reset}\n"
        extract_voice;return
    fi
    if [ ! -z $VOICE_FILE ]; then
        printf "${blue}[*] Downloading voice...\n"
        wget --tries=20 --continue "$VOICE_URL" -O ${VOICE_NAME} &> /dev/null || {
          printf "${red}ERROR:\n Internet connection failed${reset}\n"
          if [ -f ${VOICE_NAME} ]; then
              rm -f ${VOICE_NAME}
          fi
          return 0
        }
        printf "${green}[√] Successfully downloaded.${reset}\n"
        extract_voice
    else
        cleanup_voice_dir
    fi
}

function get_sha() {
    if [ -z $KEEP_IMAGE ]; then
        if [ -f ${SHA_NAME} ]; then
            rm -f ${SHA_NAME}
        fi
    fi
    if [ ! -f ${SHA_NAME} ]; then
        printf "\n${blue}[*] Getting SHA ... ${reset}\n\n"
        get_url
        wget ${EXTRA_ARGS} --continue "${SHA_URL}"
    fi
}

function verify_sha() {
    if [ -z $KEEP_IMAGE ]; then
        printf "\n${blue}[*] Verifying integrity of rootfs...${reset}\n\n"
        sha512sum -c $SHA_NAME || {
            rm -f ${SHA_NAME}
            if [ -f $PREFIX/bin/${SHA_NAME} ]; then
                printf "${red} Rootfs corrupted. Please run this installer again or download the file manually\n${reset}"
                rm -f $PREFIX/bin/${SHA_NAME}
                exit 1
            fi
            echo "Al-Amin Zone" >>$PREFIX/bin/${SHA_NAME}
            get_sha
        }
    fi
}

function extract_rootfs() {
    if [ ! -d $CHROOT ]; then
        if [ -f $IMAGE_NAME ]; then
            printf "\n${blue}[*] Extracting rootfs... ${reset}\n\n"
            play-audio ${VOICE}/${VOICE13} &> /dev/null ||:
            proot --link2symlink tar -xf $IMAGE_NAME 2> /dev/null || :
            printf "${yellow}[✔] You have successfully extracted rootfs${reset}\n\n"
            play-audio ${VOICE}/${VOICE15} &> /dev/null ||:
            echo "Al-Amin Zone" >> ${CHROOT}/${wimg}.txt
        fi
    else
        printf "${yellow}[!] Using existing rootfs directory${reset}\n"
        play-audio ${VOICE}/${VOICE14} &> /dev/null ||:
    fi
}

function extract_voice() {
    if [ ! -d ${VOICE} ]; then
        printf "\n${yellow}[!] Existing voice directory not found.${reset}\n"
        if [ -f $VOICE_NAME ]; then
            if ask "Do you want extract voice?" "N"; then
                printf "\n${blue}[*] Extracting voice... ${reset}\n\n"
                tar -xf $VOICE_NAME -C /sdcard 2> /dev/null || :
                printf "${yellow}[✔] You have successfully extracted voice${reset}\n\n"
                play-audio ${VOICE}/${VOICE15} &> /dev/null ||:
                cleanup_voice_file
            fi
        fi
    else
        printf "${yellow}[!] Using existing voice directory${reset}\n"
        if [ -z $CHECKING_VOICE ]; then
            cleanup_voice_file
        else
            cleanup_voice_dir
        fi
    fi
}

function create_launcher() {
    NH_LAUNCHER=${PREFIX}/bin/nethunter
    NH_SHORTCUT=${PREFIX}/bin/nh
    cat > $NH_LAUNCHER <<- EOF
#!/data/data/com.termux/files/usr/bin/bash -e
cd \${HOME}
play-audio ${VOICE}/${VOICE9} &> /dev/null ||:
pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1 &> /dev/null || {
	printf "\n\033[1;31mProblem of Pulseaudio\033[0m\n\n"
        echo "        Running apt update and upgrade....."
	apt update &> /dev/null
	apt-get update &> /dev/null
	apt upgrade -y
	echo "Again installing packages"
	apt reinstall pulseaudio -y &> /dev/null ||:
	apt install wget -y &> /dev/null
	wget --tries=20 https://raw.githubusercontent.com/shahinuralamin/Technical_Shahinur_Al-Amin/main/install-pulseaudio-termux -O \$HOME/pulseaudioinstaller &> /dev/null || {
	    printf "\n\033[1;31mInternet connection error\033[0m\n"
            pulseaudio --start --load="module-native-protocol-tcp auth-ip-acl=127.0.0.1 auth-anonymous=1" --exit-idle-time=-1 &> /dev/null || {
                PULSE=1
            }
        }
        if [ -f pulseaudioinstaller ]; then
        mv pulseaudioinstaller install-pulseaudio-termux;chmod +x install-pulseaudio-termux;./install-pulseaudio-termux;\$PREFIX/bin/pa;
        fi
        if [ -z \$PULSE ]; then
            echo "pulseaudio is ok"
        fi
}
## termux-exec sets LD_PRELOAD so let's unset it before continuing
unset LD_PRELOAD
## Workaround for Libreoffice, also needs to bind a fake /proc/version
if [ ! -f $CHROOT/root/.version ]; then
    touch $CHROOT/root/.version
fi

## Default user is "kali"
user="$USERNAME"
home="/home/\$user"
start="sudo -u kali /bin/bash"

## NH can be launched as root with the "-r" cmd attribute
## Also check if user kali exists, if not start as root
if grep -q "kali" ${CHROOT}/etc/passwd; then
    KALIUSR="1";
else
    KALIUSR="0";
fi
if [[ \$KALIUSR == "0" || ("\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R")) ]];then
    user="root"
    home="/\$user"
    start="/bin/bash --login"
    if [[ "\$#" != "0" && ("\$1" == "-r" || "\$1" == "-R") ]];then
        shift
    fi
fi

cmdline="proot \\
        --link2symlink \\
        -0 \\
        -r $CHROOT \\
        -b /dev \\
        -b /proc \\
        -b /sdcard \\
        $KEEP_STORAGE
        $KEEP_STORAGE1
        -b $CHROOT\$home:/dev/shm \\
        -w \$home \\
           /usr/bin/env -i \\
           HOME=\$home \\
           PATH=/usr/local/sbin:/usr/local/bin:/bin:/usr/bin:/sbin:/usr/sbin \\
           TERM=\$TERM \\
           LANG=C.UTF-8 \\
           \$start"

cmd="\$@"
if [ "\$#" == "0" ];then
    exec \$cmdline
else
    \$cmdline -c "\$cmd"
fi
EOF

    chmod 700 $NH_LAUNCHER
    if [ -L ${NH_SHORTCUT} ]; then
        rm -f ${NH_SHORTCUT}
    fi
    if [ ! -f ${NH_SHORTCUT} ]; then
        ln -s ${NH_LAUNCHER} ${NH_SHORTCUT} >/dev/null
    fi
}

function welcome_voice() {
    printf "${green}##*★*★*★*★*[  Welcome To Kali  ]*★*★*★*★*★*##\n"
    play-audio ${VOICE}/${VOICE1} &> /dev/null ||:
    printf "${light_cyan}##*****************************************##\n"
    printf "${light_cyan}## []\ [] []  []   [][\ /][]        [][]\  ##\n"
    printf "${light_cyan}## []\√[] []##[]‌   [] \√/ []        []  )] ##\n"
    printf "${light_cyan}## [] \[] []  []   []     [] ODIFIE [][]/  ##\n"
    printf "${light_cyan}##★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★★##${reset}\n\n"
    play-audio ${VOICE}/${VOICE2} &> /dev/null ||:
}

function create_kex_launcher() {
    KEX_LAUNCHER=${CHROOT}/usr/bin/kex
    cat > $KEX_LAUNCHER <<- EOF
#!/bin/bash
function get_gnu() {
   case \$(uname -m) in
        arm64-v8a|arm64-v8|aarch64|arm64)
            GNU=/usr/lib/aarch64-linux-gnu/libgcc_s.so.1;;
        armeabi|armv8l|armeabi-v7a|armv7l)
            GNU=/usr/lib/arm-linux-gnueabihf/libgcc_s.so.1;;
   esac
}

function start-kex() {
    if [ ! -f ~/.vnc/passwd ]; then
        passwd-kex
    fi
    USR=\$(whoami)
    if [ \$USR == "root" ]; then
        SCREEN=":2"
    else
        SCREEN=":1"
    fi
    get_gnu
    export HOME=\${HOME}; export USER=\${USR}; export PULSE_SERVER=127.0.0.1; LD_PRELOAD=\${GNU} nohup vncserver \$SCREEN >/dev/null 2>&1 </dev/null
    starting_kex=1
    return 0
}

function stop-kex() {
    vncserver -kill :1 | sed s/"Xtigervnc"/"NetHunter KeX"/
    vncserver -kill :2 | sed s/"Xtigervnc"/"NetHunter KeX"/
    return $?
}

function passwd-kex() {
    vncpasswd
    return $?
}

function status-kex() {
    sessions=\$(vncserver -list | sed s/"TigerVNC"/"NetHunter KeX"/)
    if [[ \$sessions == *"590"* ]]; then
        printf "\n\${sessions}\n"
        printf "\nYou can use the KeX client to connect to any of these displays.\n\n"
    else
        if [ ! -z \$starting_kex ]; then
            printf '\nError starting the KeX server.\nPlease try "nethunter kex kill" or restart your termux session and try again.\n\n'
        fi
    fi
    return 0
}

function kill-kex() {
    pkill Xtigervnc
    return \$?
}

case \$1 in
    start)
        start-kex
        ;;
    stop)
        stop-kex
        ;;
    status)
        status-kex
        ;;
    passwd)
        passwd-kex
        ;;
    kill)
        kill-kex
        ;;
    *)
        stop-kex
        start-kex
        status-kex
        ;;
esac
EOF

    chmod 700 $KEX_LAUNCHER
}

function time_zone() {
    if [ ! -f ${CHROOT}/usr/bin/tz ]; then
        cat > ${CHROOT}/usr/bin/tz <<- EOF
#!/bin/bash
sudo dpkg-reconfigure tzdata
EOF
        chmod 700 ${CHROOT}/usr/bin/tz
    fi
}

function fix_profile_bash() {
    ## Prevent attempt to create links in read only filesystem
    if [ -f ${CHROOT}/root/.bash_profile ]; then
        sed -i '/if/,/fi/d' "${CHROOT}/root/.bash_profile"
    fi
}

function fix_sudo() {
    ## fix sudo & su on start
    chmod +s $CHROOT/usr/bin/sudo
    chmod +s $CHROOT/usr/bin/su
	echo "kali    ALL=(ALL:ALL) ALL" > $CHROOT/etc/sudoers.d/kali

    # https://bugzilla.redhat.com/show_bug.cgi?id=1773148
    echo "Set disable_coredump false" > $CHROOT/etc/sudo.conf
}

function fix_uid() {
    ## Change kali uid and gid to match that of the termux user
    USRID=$(id -u)
    GRPID=$(id -g)
    nh -r usermod -u $USRID kali 2>/dev/null
    nh -r groupmod -g $GRPID kali 2>/dev/null
}

function create_kali_setup_folder() {
    if [ ! -d /sdcard/kali_setup ]; then
        mkdir /sdcard/kali_setup
    fi
}

function network_setup() {
    if [ ! -f /sdcard/kali_setup/Firefox_Network_Setup.txt ]; then
        cat > /sdcard/kali_setup/Firefox_Network_Setup.txt <<- EOF
        Al-Amin Zone

Network Setup Video =
https://youtu.be/tSI9PzjsjCI

Command for none rooted:

about:config

media.cubeb.sandbox (true)

security.sandbox.content.level (0)

Command for rooted:

about:config

media.cubeb.sandbox (false)

security.sandbox.content.level (0)

          Thanks
EOF
    fi
}

function fonts_setup() {
    if [ ! -f /sdcard/kali_setup/Fonts_Setup.txt ]; then
        cat > /sdcard/kali_setup/Fonts_Setup.txt <<- EOF
          Al-Amin Zone

Fonts Setup Video:

https://youtu.be/vB3wlb3tMoU

          Thanks
EOF
    fi
}

function tz_command() {
    if [ ! -f /sdcard/kali_setup/Time_Zone_Comman.txt ]; then
        cat > /sdcard/kali_setup/Time_Zone_Comman.txt <<- EOF
          Al-Amin Zone

Command on Terminal :
Type:

tz

or

sudo dpkg-reconfigure tzdata

and command : sudo password :

sudo password is kali

          Thanks
EOF
    fi
}

function link() {
    if [ ! -d $CHROOT/home/kali/Desktop ]; then
        mkdir $CHROOT/home/kali/Desktop
    fi
    if [ ! -f $CHROOT/home/kali/Desktop/Al_Amin_Zone.desktop ]; then
        cat > $CHROOT/home/kali/Desktop/Al_Amin_Zone.desktop <<- EOF
[Desktop Entry]
Version=1.0
Type=Link
Name=Al-Amin_Zone
Comment=
Icon=/sdcard/kali_voice/Al_Amin_Zone.png
URL=https://youtube.com/@al-amin_zone
EOF
        chmod 700 $CHROOT/home/kali/Desktop/Al_Amin_Zone.desktop
    fi
}

function minimal_nano_gui() {
    clear
    theme_confirmation() {
    printf "${green}[√] Selected ${yellow}theme '${LEVEL} size'"
    read -p "$1 [Y/n] " REPLY
    if [ -z $REPLY ]; then
        REPLY="Y"
    fi
    case "$REPLY" in
        N*|n*) minimal_nano_gui ;;
        Y*|y*) ;;
        *) theme_confirmation ;;
    esac
    }
    printf "${blue}\n[*] Checking GUI package dependencies...\n"
    unset dbus-x11 xfce4 xfce4-terminal tigervnc-standalone-server KEEP_TERMINAL
    if [ ! -f ${CHROOT}/usr/bin/dbus-launch ]; then
        DBUS_X11="dbus-x11";KEEP_TERMINAL=1
    fi
    if [ ! -f ${CHROOT}/usr/bin/startxfce4 ]; then
        echo "    [1] Kali desktop theme 'Large size' [L]"
        echo "    [2] Kali desktop theme 'Small size' [S]"
        kali_theme() {
        printf "${light_cyan}[=] Enter the Xfce-theme you want to install:"
        printf "${green}";read -p "$1 " REPLY
        printf "${reset}"
        case "$REPLY" in
            1|l|L) XFCE4="kali-desktop-xfce";KEEP_TERMINAL=1;LEVEL='Large';printf "${green}Select ⇓ if your device has more than 4GB of RAM.\n";theme_confirmation;;
            2|s|S) XFCE4="xfce4";XFCE_TERMINAL="xfce4-terminal";KEEP_TERMINAL=1;LEVEL='Small';theme_confirmation;;
            *) kali_theme;;
        esac
        }
        kali_theme
    fi
    if [ ! -f ${CHROOT}/usr/bin/tigervncserver ]; then
        TIGER_VNC="tigervnc-standalone-server";KEEP_TERMINAL=1
    fi
    printf "\n${blue}[*] Creating network server…${reset}\n"
    cat > ${CHROOT}/etc/resolv.conf <<- EOF
# This is /run/systemd/resolve/stub-resolv.conf managed by man:systemd-resolved(8).
# Do not edit.
#
# This file might be symlinked as /etc/resolv.conf. If you're looking at
# /etc/resolv.conf and seeing this text, you have followed the symlink.
#
# This is a dynamic resolv.conf file for connecting local clients to the
# internal DNS stub resolver of systemd-resolved. This file lists all
# configured search domains.
#
# Run "resolvectl status" to see details about the uplink DNS servers
# currently in use.
#
# Third party programs should typically not access this file directly, but only
# through the symlink at /etc/resolv.conf. To manage man:resolv.conf(5) in a
# different way, replace this symlink by a static file or a different symlink.
#
# See man:systemd-resolved.service(8) for details about the supported modes of
# operation for /etc/resolv.conf.

# Generated by NetworkManager
nameserver 8.8.8.8
nameserver 8.8.4.4
options edns0 trust-ad
search whitedome.com.au
EOF
    nh_terminal() {
    if [ ! -z $KEEP_TERMINAL ]; then
        if ask "Do you want install the apt update?" "N"; then
            clear
            echo 'apt updating...........……'
            $NH_LAUNCHER apt update -y || :
        fi
        clear
        printf "\n${yellow}[+] sudo default kali password is 'kali' ..\n"
        printf "    ${blue}Example:-\n    ${reset}[sudo] password for kali: ${green}kali\n\n${green}Complete packages may take more than half an hour to install.${reset}\n"
        if ask "Missing some package. Do you want to installing any way?" "Y"; then
            for g in $XFCE4 $XFCE_TERMINAL $DBUS_X11 $TIGER_VNC; do
                if [ ! -z $g ]; then
                    printf "${green}\n";read -p "Installing ${g}... [Enter] "; printf "${reset}\n"
                    $NH_LAUNCHER sudo apt reinstall -y $g || {
                        printf "${red}ERROR: Failed to install GUI packages.\n Exiting.\n${reset}"
                        echo 'apt updating...........……'
                        $NH_LAUNCHER apt update -y || {
                            printf "${red}ERROR: Failed to apt install packages.\n Exiting.\n${reset}"
                            exit
                        nh_terminal
                        }
                    }
                fi
            done
            if [ $XFCE4 == "kali-desktop-xfce" ]; then
                echo "Al-Amin Zone" >> ${CHROOT}/usr/bin/.kali_desktop_theme
            fi
            printf "\n${blue}[*] Configuring VNC startup……${reset}\n"
            VNC_LAUNCHER=${CHROOT}/home/kali/.vnc/xstartup
            VNC_SHORTCUT=${CHROOT}/root/.vnc/xstartup
            cat > $VNC_LAUNCHER <<- EOF
#!/bin/sh

#############################
##          All            ##
unset SESSION_MANAGER
unset DBUS_SESSION_BUS_ADDRESS
export SHELL=/bin/bash

#############################
##          Gnome          ##
[ -x /etc/vnc/xstartup ] && exec /etc/vnc/xstartup
[ -r /root/.Xresources ] && xrdb /root/.Xresources
vncconfig -iconic &
dbus-launch --exit-with-session gnome-session &


############################
##           LXQT         ##
####exec openbox-session
#exec startlxqt


############################
##          KDE           ##
#exec /usr/bin/startkde


############################
##          XFCE          ##
startxfce4
EOF
            chmod 700 $VNC_LAUNCHER
            if [ -L ${VNC_SHORTCUT} ]; then
            rm -f ${VNC_SHORTCUT}
            fi
            if [ ! -f ${VNC_SHORTCUT} ]; then
                ln -s ${VNC_LAUNCHER} ${VNC_SHORTCUT} >/dev/null
            fi
            if ask "Do you want install the apt-get update?" "N"; then
                clear
                echo 'Installing apt-get update'
                $NH_LAUNCHER sudo apt-get update -y
            fi
        fi
    fi
    if [ ! -f ${CHROOT}/usr/bin/.kali_desktop_theme ]; then
        if ask "Do you want to install media player, internet browser and text pad?" "N"; then
            clear
            echo 'Installing Media Player'
            $NH_LAUNCHER sudo apt install parole
            clear
            echo 'Installing Firefox browser'
            $NH_LAUNCHER sudo apt install firefox-esr
            clear
            echo 'Installing Mousepad'
            $NH_LAUNCHER sudo apt install mousepad
        fi
    fi
    }
    checkup_internet
    if [ -z $INTERNET ]; then
        nh_terminal
    else
        printf "${red}[x] Internet connection is not ok....…"
        if ask "Is your device connected to the internet..?…     " "N"; then
            nh_terminal
            return
        fi
    fi
}

function alhamdulillah() {
    printf "\n${green}##               Alhamdulillah                 ##\n"
    printf "${blue}*************************************************\n"
    printf "${green}#################################################\n"
    printf "${green}#####################${red}#######${green}#####################\n"
    printf "${green}##################${red}#############${green}##################\n"
    printf "${green}#################${red}###############${green}#################\n"
    printf "${green}################${red}###${yellow}Bangladesh${red}####${green}################\n"
    printf "${green}#################${red}###############${green}#################\n"
    printf "${green}##################${red}#############${green}##################\n"
    printf "${green}#####################${red}#######${green}#####################\n"
    printf "${green}#################################################${reset}\n\n"
    play-audio ${VOICE}/${VOICE4} &> /dev/null ||:
    play-audio ${VOICE}/${VOICE5} &> /dev/null ||:
    play-audio ${VOICE}/${VOICE6} &> /dev/null ||:
}

function print_banner() {
    clear
    printf "${blue}##################################################\n"
    printf "${blue}##                ${light_cyan}Al-Amin Zone${blue}                  ##\n"
    printf "${blue}##  88      a8P         db        88        88  ##\n"
    printf "${blue}##  88    .88'         d88b       88        88  ##\n"
    printf "${blue}##  88   88'          d8''8b      88        88  ##\n"
    printf "${blue}##  88 d88           d8'  '8b     88        88  ##\n"
    printf "${blue}##  8888'88.        d8YaaaaY8b    88        88  ##\n"
    printf "${blue}##  88P   Y8b      d8''''''''8b   88        88  ##\n"
    printf "${blue}##  88     '88.   d8'        '8b  88        88  ##\n"
    printf "${blue}##  88       Y8b d8'          '8b 888888888 88  ##\n"
    printf "${blue}##          ${green}S M Sahinur Alam (Al-Amin)${blue}          ##\n"
    printf "${blue}####  ############# NetHunter ####################${reset}\n\n"
}


##################################
##              Main            ##

# Add some colours
red='\033[1;31m'
green='\033[1;32m'
yellow='\033[1;33m'
blue='\033[1;34m'
light_cyan='\033[1;96m'
reset='\033[0m'

EXTRA_ARGS=""
if [[ ! -z $1 ]]; then
    EXTRA_ARGS=$1
    if [[ $EXTRA_ARGS != "--insecure" ]]; then
        EXTRA_ARGS=""
    fi
fi

cd $HOME
print_banner
get_arch
set_strings
check_dependencies
check_update
get_voice
sound_setup
prepare_fs
extract_rootfs
create_launcher
cleanup
play-audio ${VOICE}/${VOICE3} &> /dev/null ||:
welcome_voice
printf "\n${blue}[*] Configuring NetHunter for Termux ...\n"
fix_profile_bash
fix_sudo
create_kex_launcher
fix_uid
create_kali_setup_folder
time_zone
tz_command
network_setup
fonts_setup
link
if [ -f ${CHROOT}/minimal.txt ]; then
      minimal_nano_gui
elif [ -f ${CHROOT}/nano.txt ]; then
      minimal_nano_gui
fi
alhamdulillah

print_banner
printf "${green}[=] Kali NetHunter for Termux installed successfully${reset}\n\n"
printf "${green}[+] To start Kali NetHunter, type:${reset}\n"
printf "${green}[+] nethunter             # To start NetHunter CLI${reset}\n"
printf "${green}[+] nethunter kex passwd  # To set the KeX password${reset}\n"
printf "${green}[+] nethunter kex &       # To start NetHunter GUI${reset}\n"
printf "${green}[+] nethunter kex stop    # To stop NetHunter GUI${reset}\n"
#printf "${green}[+] nethunter kex <command> # Run command in NetHunter env${reset}\n"
printf "${green}[+] nethunter -r          # To run NetHunter as root${reset}\n"
#printf "${green}[+] nethunter -r kex passwd  # To set the KeX password for root${reset}\n"
#printf "${green}[+] nethunter kex &       # To start NetHunter GUI as root${reset}\n"
#printf "${green}[+] nethunter kex stop    # To stop NetHunter GUI root session${reset}\n"
#printf "${green}[+] nethunter -r kex kill # To stop all NetHunter GUI sessions${reset}\n"
#printf "${green}[+] nethunter -r kex <command> # Run command in NetHunter env as root${reset}\n"
printf "${green}[+] nh                    # Shortcut for nethunter${reset}\n\n"
play-audio ${VOICE}/${VOICE7} &> /dev/null ||:
play-audio ${VOICE}/${VOICE8} &> /dev/null ||:
